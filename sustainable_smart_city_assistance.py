# -*- coding: utf-8 -*-
"""Sustainable Smart City Assistance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g5YGKvuxp4mqIVc7pCx6hzARBhenQTue
"""

!pip install transformers torch gradio PyPDF2 -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import PyPDF2
import pandas as pd

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# Core LLM response function
def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}
    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return response.replace(prompt, "").strip()

# PDF text extraction
def extract_text_from_pdf(pdf_file):
    if pdf_file is None:
        return ""
    try:
        pdf_reader = PyPDF2.PdfReader(pdf_file)
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text() + "\n"
        return text
    except Exception as e:
        return f"Error reading PDF: {str(e)}"

# Eco Tips Generator
def eco_tips_generator(problem_keywords):
    prompt = f"Generate practical and actionable eco-friendly tips for sustainable living related to: {problem_keywords}. Provide specific solutions and suggestions:"
    return generate_response(prompt, max_length=1000)

# Policy Summarization
def policy_summarization(pdf_file, policy_text):
    content = extract_text_from_pdf(pdf_file) if pdf_file else policy_text
    summary_prompt = f"Summarize the following policy document and extract the most important points, key provisions, and implications:\n\n{content}"
    return generate_response(summary_prompt, max_length=1200)

# Citizen Feedback Reporting
def citizen_feedback_report(issue_description, category):
    prompt = f"A citizen reported the following issue under category '{category}': {issue_description}. Log this report and suggest next steps for city administrators."
    return generate_response(prompt, max_length=800)

# KPI Forecasting
def kpi_forecasting(kpi_file):
    try:
        df = pd.read_csv(kpi_file)
        if 'Year' not in df.columns or 'WaterUsage' not in df.columns:
            return "CSV must contain 'Year' and 'WaterUsage' columns."
        latest_year = df['Year'].max()
        latest_usage = df[df['Year'] == latest_year]['WaterUsage'].mean()
        forecast = latest_usage * 1.05  # Simple 5% growth assumption
        return f"Forecasted water usage for next year ({latest_year + 1}): {forecast:.2f} units"
    except Exception as e:
        return f"Error processing KPI file: {str(e)}"

# Public Awareness Campaign Generator
def campaign_content_generator(topic, audience):
    prompt = f"Generate public awareness campaign content for the topic '{topic}' targeting '{audience}'. Include:\n- A short poster headline\n- A social media caption\n- An SMS alert\nMake it clear, engaging, and culturally appropriate."
    return generate_response(prompt, max_length=800)

# Gradio Interface
with gr.Blocks() as app:
    gr.Markdown("# üèôÔ∏è Smart City Assistant")

    with gr.Tabs():
        # Eco Tips Tab
        with gr.TabItem("üå± Eco Tips Generator"):
            with gr.Row():
                with gr.Column():
                    keywords_input = gr.Dropdown(
                        label="Select Environmental Topic",
                        choices=[
                            "Plastic Waste",
                            "Solar Energy",
                            "Water Conservation",
                            "Energy Saving",
                            "Air Pollution",
                            "Urban Gardening"
                        ]
                    )
                    generate_tips_btn = gr.Button("Generate Tips")
                with gr.Column():
                    tips_output = gr.Textbox(label="Eco-Friendly Tips", lines=15)
            generate_tips_btn.click(eco_tips_generator, inputs=keywords_input, outputs=tips_output)

        # Policy Summarization Tab
        with gr.TabItem("üìÑ Policy Summarization"):
            with gr.Row():
                with gr.Column():
                    pdf_upload = gr.File(label="Upload Policy PDF", file_types=[".pdf"])
                    policy_text_input = gr.Textbox(label="Or paste policy text", lines=5)
                    summarize_btn = gr.Button("Summarize")
                with gr.Column():
                    summary_output = gr.Textbox(label="Summary Output", lines=20)
            summarize_btn.click(policy_summarization, inputs=[pdf_upload, policy_text_input], outputs=summary_output)

        # Citizen Feedback Tab
        with gr.TabItem("üì¢ Citizen Feedback"):
            with gr.Row():
                with gr.Column():
                    issue_input = gr.Dropdown(
                        label="Select Issue Description",
                        choices=[
                            "Burst water pipe",
                            "Streetlight not working",
                            "Garbage not collected",
                            "Pothole on road",
                            "Open manhole",
                            "Illegal dumping"
                        ]
                    )
                    category_input = gr.Dropdown(
                        label="Category",
                        choices=["Water", "Electricity", "Roads", "Waste", "Other"]
                    )
                    report_btn = gr.Button("Submit Report")
                with gr.Column():
                    report_output = gr.Textbox(label="Report Log", lines=10)
            report_btn.click(citizen_feedback_report, inputs=[issue_input, category_input], outputs=report_output)

        # KPI Forecasting Tab
        with gr.TabItem("üìä KPI Forecasting"):
            with gr.Row():
                with gr.Column():
                    kpi_upload = gr.File(label="Upload KPI CSV", file_types=[".csv"])
                    forecast_btn = gr.Button("Forecast KPI")
                with gr.Column():
                    forecast_output = gr.Textbox(label="Forecast Result", lines=5)
            forecast_btn.click(kpi_forecasting, inputs=kpi_upload, outputs=forecast_output)

        # Campaign Content Tab
        with gr.TabItem("üì£ Campaign Content Generator"):
            with gr.Row():
                with gr.Column():
                    campaign_topic = gr.Dropdown(
                        label="Campaign Topic",
                        choices=[
                            "Dengue Prevention",
                            "Plastic Waste Reduction",
                            "Water Conservation",
                            "Energy Saving",
                            "Air Pollution Awareness",
                            "Tree Plantation Drive"
                        ]
                    )
                    campaign_audience = gr.Dropdown(
                        label="Target Audience",
                        choices=[
                            "Residents of North Chennai",
                            "School Students",
                            "Senior Citizens",
                            "Local Business Owners",
                            "Slum Communities",
                            "General Public"
                        ]
                    )
                    campaign_btn = gr.Button("Generate Campaign Content")
                with gr.Column():
                    campaign_output = gr.Textbox(label="Generated Outreach Content", lines=15)
            campaign_btn.click(campaign_content_generator, inputs=[campaign_topic, campaign_audience], outputs=campaign_output)

app.launch(share=True)